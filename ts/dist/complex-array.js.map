{"version":3,"file":"complex-array.js","sources":["../src/complex-array.ts"],"sourcesContent":["/// <reference path='./types/types.d.ts' />\n/// <reference path='./types/window.d.ts' />\n\nimport Complex from './complex';\nimport initializeData from './data';\n\nconst {\n  window: {requestIdleCallback, navigator: {hardwareConcurrency = 1} = {} as Window['navigator']} = {} as Window,\n} = globalThis;\n\nexport declare type ComplexArrayStore = Int32Array | Int16Array | Int8Array | Float32Array | Float64Array | number[];\nexport declare type ComplexArrayStoreConstructor<T = ComplexArrayStore> = TypedArrayConstructor<ComplexArrayStore>;\n\nexport class ComplexArray<T extends ComplexArrayStore = ComplexArrayStore> implements Data<ComplexNumber> {\n  public data: T; // private _data: T; get data(): T { return this._data; } set data(data: T) { this._data = data, this.unallocate(); }\n  public values: Complex[];\n  public allocations: number[] = [];\n\n  constructor(data: T);\n  constructor(length: number);\n  constructor(parameter: number | T, store: ComplexArrayStoreConstructor = Float32Array) {\n    const data = parameter > 0 ? (new store((parameter as number) * 2) as T) : parameter;\n    if (!data || !(data instanceof store))\n      throw Error(\n        'ComplexArray requires either a positive size value or a double-sized Float64Array as the first argument.',\n      );\n    // this.scale = store === Int8Array ? 0.25 : 1;\n    // @ts-ignore\n    this.data = data;\n    this.values = new Array(this.length);\n    initializeData(this);\n  }\n\n  get length(): number {\n    return this.data && this.data.length / 2;\n  }\n\n  get<U = ComplexNumber>(i: number): U {\n    return (this.allocate(i) as any) as U;\n  }\n\n  // @ts-ignore\n  set<U = ComplexNumber>(i: number, value: Complex, {real = 0, imag = 0} = value || {}) {\n    (this.data[i * 2] = real), (this.data[i * 2 + 1] = imag);\n    this.allocate(i);\n    // if (value instanceof Complex) this.values[i] = value, this.allocate(i);\n  }\n\n  create(i: number, value = new ComplexCell(this, i)) {\n    return (this.values[i] = value), value;\n  }\n\n  allocate(i: number, value = this.values[i]) {\n    // const create = (i: number) => new Complex(this.data[i * 2], this.data[i * 2 + 1]);\n    // return this.allocations.push(i), value || (this.values[i] = value = create(i), value);\n    // const create = (i: number, value = new ComplexCell(this.data, i)) => (this.values[i] = value, value);\n    return value || this.create(i);\n  }\n\n  unallocate({allocations, values} = this) {\n    return;\n    if (allocations && allocations.length)\n      requestIdleCallback(() => {\n        const _allocations = allocations.splice(0, allocations.length);\n        for (const i of _allocations) delete values[i];\n      });\n  }\n}\n\nexport declare type ComplexArrayData = ComplexArray['data'];\n\nexport class ComplexCell extends Complex {\n  constructor(public array: ComplexArray, public index: number = NaN) {\n    super();\n  }\n  get data(): ComplexArrayData {\n    return this.array.data;\n  }\n  get real(): number {\n    return this.data[this.index * 2];\n  }\n  set real(real: number) {\n    this.data[this.index * 2] = real;\n  }\n  get imag(): number {\n    return this.data[this.index * 2 + 1];\n  }\n  set imag(imag: number) {\n    this.data[this.index * 2 + 1] = imag;\n  }\n  get _magnitude2() {\n    return Complex.magnitude2(this.data[this.index * 2], this.data[this.index * 2 + 1]);\n  }\n  get magnitude() {\n    const magnitude2 = Complex.magnitude2(this.data[this.index * 2], this.data[this.index * 2 + 1] || 0);\n    return Math.sqrt(magnitude2);\n    // return '_magnitude' in this ? this._magnitude : (this._magnitude = Math.sqrt(this.magnitude2));\n  }\n}\n\nexport default ComplexArray;\n\n// export class ComplexCell extends Complex {\n//     public array: ComplexArray;\n//     public offset: number;\n// }\n"],"names":[],"mappings":"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"}