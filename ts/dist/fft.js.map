{"version":3,"file":"fft.js","sources":["../src/fft.ts"],"sourcesContent":["/// <reference path='./types/types.d.ts' />\n/// <reference path='./types/window.d.ts' />\n\nimport {Complex} from './complex';\nimport filter from './filter';\nimport iterate from './iteration';\nimport ComplexArray from './complex-array';\nimport cisExp, {cisTables} from './cis-exp';\nimport {round, mround, trunc, diagonal} from './math';\nimport initializeData from './data';\n// tslint:disable: no-magic-numbers no-duplicate-constiable space-before-function-paren\n\nconst {\n  window: {requestIdleCallback, navigator: {hardwareConcurrency = 1} = {} as Window['navigator']} = {} as Window,\n} = globalThis;\n\nconst workerSizes = [128];\nhardwareConcurrency > 0 && workerSizes.push(256);\nhardwareConcurrency > 1 && workerSizes.push(512);\nhardwareConcurrency > 4 && workerSizes.push(1024);\nhardwareConcurrency > 6 && workerSizes.push(2048);\n\nexport const workers = {};\nexport const useWorkers = typeof Worker === 'function';\n\nuseWorkers &&\n  workerSizes.forEach(size => {\n    try {\n      workers[size] = new Worker('./worker.js');\n      // workers[size].postMessage({ action: 'cisExp', buffer: cisExp.buffer });\n      hardwareConcurrency > 4 &&\n        requestIdleCallback(() => workers[size].postMessage({action: 'preGenerate', size: size ** 2}), {\n          timeout: size * 2,\n        });\n    } catch (exception) {\n      console.warn(exception);\n    }\n  }, workers);\n\nexport const outdated = object => (object && object.outdated === true) || false; // : { outdated?: boolean }, i = 0) => !(i % 100) ? object.outdated === true : false;\nexport const FFT = (input: RealDataLike, output: ComplexDataLike): ComplexData =>\n  // @ts-ignore\n  forwardFFT(initializeData(input), initializeData(output), {start: 0, offset: 0, size: input.length, step: 1});\nexport const IFFT = (input: ComplexDataLike, output: RealDataLike): RealData =>\n  // @ts-ignore\n  inverseFFT(initializeData(input), initializeData(output), {start: 0, offset: 0, size: input.length, step: 1});\n\nconst {PI, imul, sin, cos, sqrt, abs, hypot} = Math,\n  PI2 = PI * 2;\nconst voidExp = [];\n\n/**\n * Fourier Transform/Inverse Pairs:\n *  Given   f(x) <=> F(u)\n *      let     F(u) = ∫ f(x) * e ** -j2πux dx;\n *              f(x) = ∫ F(u) * e ** j2πux du;\n *      where   x = -∞ … ∞ in the 1D spatial coordinates domain\n *              u = -∞ … ∞ in the respective spatial frequency domain\n *              j = √-1\n *\n *  Given   f(x,y) <=> F(u,v)\n *      let     F(u,v) = ∫∫ f(x,y) * e ** -j2π(ux+vy) dx dy;\n *              f(x,y) = ∫∫ F(u,v) * e ** j2π(ux+vy)  du dv;\n *      where   x & y = -∞ … ∞ in orthogonal 2D spatial coordinates domains\n *              u & v = -∞ … ∞ in the respective spatial frequency domains\n *\n * @see http://www.csc.kth.se/utbildning/kth/kurser/DD2422/bildat08/report_FFT.pdf\n * @see http://www.robots.ox.ac.uk/~az/lectures/ia/lect2.pdf\n */\nexport function transform($in: TypedArray, $out: TypedArray, direction: 'forward' | 'inverse'): boolean {\n  const forward = direction === 'forward',\n    sign = forward ? 1 : -1,\n    PIt = PI2; //  -1 * sign * PI2; // forward ? -1 * PI2 : PI2;\n  const validData = $in && $in.length > 0 && $out && $out.length > 0;\n  const fromReal = validData && $in.length === $out.length / 2,\n    fromComplex = validData && $in.length === $out.length;\n  const size = fromReal ? $in.length : fromComplex ? $in.length / 2 : 0; // n = size, n2 = n >> 1, n4 = n >> 2, n8 = n >> 3; // tslint:disable-line:no-bitwise\n  const cis = cisTables.get(size),\n    [n, n2, n4, n8] = cis.n;\n\n  if (!size || !(validData && (fromReal || fromComplex))) return false;\n  // let iteration = 0; const rounding = 1000000, matching = [];\n\n  const integrate: (size: number, start: number, offset: number, step: number) => boolean = (\n    size,\n    start,\n    offset,\n    step,\n  ) => {\n    const length = size / 2,\n      end = start + length,\n      d = n / size; // const twiddle = PIt / size;\n    // let h = 0; const d = n / size; // tslint:disable-line:no-bitwise\n\n    // Cooley-Tukey decimation-in-time radix-2 FFT\n    // for (let k = start, kt, k1, k2, r1, i1, r2, i2, t, t1, rt, it, rk, ik, rr, ir, ri, ii;\n    for (\n      let k = start, h = 0, k1, k2, r1, i1, r2, i2, rt, it, rk, ik;\n      ((k1 = imul(k, 2)),\n      (k2 = imul(k + length, 2)),\n      (r1 = $out[k1]),\n      (i1 = $out[k1 + 1]),\n      (r2 = $out[k2]),\n      (i2 = $out[k2 + 1]),\n      // t = cisExp.create(k * twiddle), // rt = t[0], it = t[1],\n      // kt = k * twiddle, t1 = [cos(kt), sign * sin(kt)], // rt = cos(kt), it = sin(kt), t1 = [rt, it],\n      // rt = cisTable[h + n4], it = sign * cisTable[h],\n      (rt = cis[h + n4]),\n      (it = sign * cis[h]),\n      (rk = (r2 || i2) && r2 * rt + i2 * it),\n      (ik = (r2 || i2) && -r2 * it + i2 * rt)),\n        k < end;\n      k++, h += d\n    )\n      ($out[k1] += rk), ($out[k1 + 1] += ik), ($out[k2] = r1 - rk), ($out[k2 + 1] = i1 - ik);\n    // {\n    //     // if (sign > 0 && matching.length < 100) {\n    //     //     const tv = Array.from(new Float32Array(t1));\n    //     //     const cv = tv[0], sv = tv[1], tn = cisTable.length;\n    //     //     const t2 = [rt, it], cd = abs(t2[0] - cv), sd = abs(t2[1] - sv);\n    //     //     matching.push({\n    //     //         c1: cv, c2: t2[0], cd: `${abs(round(cd * 100 / PI))}%`,\n    //     //         s1: sv, s2: t2[0], sd: `${abs(round(sd * 100 / PI))}%`,\n    //     //         h,\n    //     //     });\n    //     //     // console.log(iteration, { ti: [ci, si], td, ts: { t1: tv, t2 } }); // k, kt: k * twiddle,\n    //     // }\n    //     $out[k1] += rk, $out[k1 + 1] += ik, $out[k2] = r1 - rk, $out[k2 + 1] = i1 - ik;\n    //     // h += d;\n    // }\n    // iteration++;\n    return true;\n  };\n\n  const translate: (start: number, offset: number) => boolean = fromReal\n    ? (start, offset) => (($out[start * 2] = $in[offset] || 0), ($out[start * 2 + 1] = 0), true)\n    : fromComplex\n    ? (start, offset) => (\n        ($out[start * 2] = $in[offset * 2] || 0), ($out[start * 2 + 1] = $in[offset * 2 + 1] || 0), true\n      )\n    : (start, offset) => false;\n\n  const aggregate = (size, start, offset, step) =>\n    size === 1 ? translate(start, offset) : size > 1 ? integrate(size, start, offset, step) : false;\n\n  // return iterate({ size }, aggregate), true;\n  iterate({size}, aggregate);\n  // console.table(matching);\n  return true;\n}\n\nfunction iterateFFT(\n  input: RealData | ComplexData | Uint8Array | Uint8ClampedArray | Float32Array,\n  output: ComplexArray | ComplexData | Float32Array,\n  direction: 'forward' | 'inverse',\n) {\n  const $in: TypedArray = (input['BYTES_PER_ELEMENT']\n    ? input\n    : input instanceof ComplexArray\n    ? input.data\n    : input) as TypedArray;\n  const $out: TypedArray =\n    output instanceof ComplexArray ? (output.data as TypedArray) : ((output as any) as TypedArray);\n  transform($in, $out, direction);\n}\n\nfunction forwardFFT(\n  this: any,\n  input: RealData,\n  output: MutableData<ComplexData>,\n  {start = 0, offset = 0, size = input.length, step = 1}: FFTIteration = {},\n) {\n  // const iterator = iterateFFT({ start, offset, size, step }, 'forward', input, output);\n  const iterator = iterateFFT(input, output, 'forward');\n  return processForwardData(output), output as ComplexData; // input['outdated'] || output['outdated'] || processFFT(output), output as ComplexData;\n}\n\n// -tslint:disable-next-line:cyclomatic-complexity\nexport function processForwardData(output: ComplexData, {length = output.length} = {}) {\n  let max = -Infinity,\n    min = Infinity; // let rmax = -Infinity, rmin = Infinity, imax = -Infinity, imin = Infinity;\n  output['outdated'] = output['outdated'] === true;\n  const $out: TypedArray =\n    output instanceof ComplexArray ? (output.data as TypedArray) : ((output as any) as TypedArray);\n  const factor = 2 / length;\n  for (let k = 0; k < length; k++) {\n    // !outdated(output) &&\n    const k0 = imul(k, 2),\n      r = $out[k0],\n      i = $out[k0 + 1];\n    // const t = output.get(k), { real: r, imag: i } = t;\n    const m = hypot(r, i); // factor * ((r ** 2 + i ** 2) ** 0.5); // (Complex.magnitude2(r || 0, i || 0) ** 0.5);\n    (m > max && ((max = m), true)) || (m < min && ((min = m), true)); // (r > rmax && (rmax = r, true)) || (r < rmin && (rmin = r, true)); (i > imax && (imax = i, true)) || (i < imin && (imin = i, true));\n  }\n  return (output.max = max), (output.min = min), output as ComplexData; // out['rmax'] = rmax, out['rmin'] = rmin; out['imax'] = imax, out['imin'] = imin;\n}\n\nfunction inverseFFT(\n  this: any,\n  input: ComplexData,\n  output: MutableData<RealData | ComplexData>,\n  {start = 0, offset = 0, size = input.length, step = 1}: FFTIteration = {},\n) {\n  const intrim = (output['intrim'] = Object.defineProperty(new ComplexArray(size), 'progress', {\n    get: () => output.progress,\n    set: progress => (output.progress = progress),\n  }));\n  intrim['filteredSize'] = input['filteredSize'];\n  // const iterator = iterateFFT({ start, offset, size, step }, 'inverse', input, intrim); // const filteredSize = isNaN(input['filteredSize']) ? NaN : input['filteredSize']; // 'filteredSize' in input && !isNaN(input['filteredSize']) ? input['filteredSize'] : size;\n  const iterator = iterateFFT(input, intrim, 'inverse'); // const filteredSize = isNaN(input['filteredSize']) ? NaN : input['filteredSize']; // 'filteredSize' in input && !isNaN(input['filteredSize']) ? input['filteredSize'] : size;\n  return processInverseData(intrim, output), output as RealData; // input['outdated'] || output['outdated'] || processInverseData(output), output as RealData;\n}\n\nexport function processInverseData(\n  intrim: ComplexData,\n  output: MutableData<RealData | ComplexData>,\n  {length = intrim.length, denominator = length} = {},\n) {\n  // intrim['filteredSize'] ||\n  let max = -Infinity,\n    min = Infinity; // const magnitudes = Array(size);\n  // const count = intrim['filteredSize'], factor = count > 0 ? (length / count) : 1;\n  for (let k = 0; k < length; k++) {\n    // !outdated(output) &&\n    const t = intrim.get(k),\n      {real = 0} = t as Complex,\n      v = (real || 0) / denominator;\n    output.set(k, v);\n    v > max ? (max = v) : v < min ? (min = v) : false;\n  }\n  return (output.max = max), (output.min = min), output as RealData;\n}\n\nconst {plusTimes, minusTimes, plusTimesSet, minusTimesSet} = Complex;\n\nexport default {Complex, ComplexArray, forward: FFT, inverse: IFFT, filter, initializeData, outdated};\nexport {FFT as forward, IFFT as inverse, initializeData};\n"],"names":[],"mappings":"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"}